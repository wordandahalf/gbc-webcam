;                                     DESCRIPTION
; Raspberry Pi Pico PIO code for interfacing with the M64282FP silicon retina. Its protocol is simple 4-state FSM,
; detailed in the datasheet.
;                                  CLOCK CONFIGURATION
; The PIO must be running at 16x the desired Xck frequency. So, for the maximum spec of 500 kHz with the default board
; frequency, the clock should be 4 MHz. This corresponds to a clock divider of 15.625.
;                                   PIN CONFIGURATION
; | -------- SET GPIOs ---------- |     | --- OUT GPIO --- |     | -- SIDE GPIO -- |
; | Pin 4 | Pin 3 | Pin 2 | Pin 1 |     |     Pin 1        |     |      Pin 1      |
; | Reset | Load  | Start | Read  |     |    Serial In     |     |      Clock      |
; | ----------------------------- |     | ---------------- |     | --------------- |

.program m64282fp
.define PUBLIC xck_multiplier 16
.side_set 1
    set pins, 0b1000                side 1  [7] ; Initialize state of pins.
    set x, 7                        side 0  [7] ; The sensor has 8 registers we need to configure.
                                                ; We place this here to give the sensor a clock before pulling reset down.
    set pins, 0b0000                side 1  [7] ; Reset the stored register values.
    nop                             side 0  [2] ; Pad cycle.
configure_register:
    set y, 10                       side 0  [0] ; Each register is configured as a 3-bit address followed by its 8-bit value.
    set pins, 0b1000                side 0  [0] ; Clear load from previous iteration of write_bits, ensuring hold time meets spec
                                                ; of at least 0.4 us.
    jmp write_bits                  side 0  [0]
loop_write_bits:
    irq 0                           side 0  [5] ; Tell CPU to send over exposure and wait time.
write_bits:
    out pins, 1                     side 0  [1] ; Shift bit from TX FIFO into Serial In
    jmp y--, loop_write_bits        side 1  [7] ; Continue shifting the remaining data.
    set pins, 0b1100                side 0  [0] ; Pull load HIGH on falling edge to signal to sensor
    out pins, 21                    side 0  [0] ; Trash the remaining 21 bits in FIFO
    jmp x--, configure_register     side 0  [0] ; that the full data has been sent. Continue to configure the next
                                                ; register, or fall through if done.
done_configure_register:
    nop                             side 0  [0] ; Ensure 1-cycle delay before pulling load LOW, making hold time same as other
                                                ; iterations.
    set pins, 0b1000                side 0  [4] ; Pull load LOW as on line 17.
    nop                             side 1  [0] ; Pad cycle.
configure_exposure:
.wrap_target
    irq 0                           side 1  [4] ; Tell CPU to send exposure and read times for next frame.
    pull                            side 1  [0] ; Pull number of cycles (plus one) to wait from FIFO.
    out x, 32                       side 1  [0] ; Move exposure cycles from OSR to scratch register for decrementing.
    nop                             side 0  [7] ; Pull start HIGH for one cycle.
    set pins, 0b1010                side 1  [7] ; Rising edge
loop_wait_exposure:
    set pins, 0b1000                side 0  [7] ; Clear start on first iteration, otherwise use as nop.
    jmp x--, loop_wait_exposure     side 1  [7] ; Rising edge, continue looping.
done_wait_exposure:
    pull                            side 0  [6] ; Pull number of pixels to read from FIFO
    out x, 32                       side 0  [0] ; Move from OSR to scratch register
read_frame:
    irq 1                           side 1  [0] ; For now, signal to CPU to sample Vout.
    set pins, 0b1001                side 1  [6] ; Pull read HIGH while ADC is reading.
    jmp x--, read_frame             side 0  [7] ; Loop until done
    nop                             side 1  [0] ; Begin rising edge, padding cycle to correct length
.wrap                                           ; Wrap back to exposure loop
